#!/bin/bash

function kubectl-set-api-version() {

  K8S_API_VERSION="v1"

}

function kubectl-create-admin-user() {

  K8S_USERNAME="$1"
  K8S_NS="kube-system"
  kubectl-set-api-version

  if [ -z "$K8S_USERNAME" ]; then echo "Usage: ${FUNCNAME} \$K8S_USERNAME"; return 1; fi

  cat <<EOF | kubectl create -f -
apiVersion: ${K8S_API_VERSION}
kind: ServiceAccount
metadata:
  name: ${K8S_USERNAME}
  namespace: ${K8S_NS}
EOF

  cat <<EOF | kubectl create -f -
apiVersion: rbac.authorization.k8s.io/${K8S_API_VERSION}
kind: ClusterRoleBinding
metadata:
  name: ${K8S_USERNAME}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: ${K8S_USERNAME}
  namespace: ${K8S_NS}
EOF

}

function kubectl-get-user-token() {

  K8S_USERNAME="$1"
  K8S_NS="kube-system"

  if [ -z "$K8S_USERNAME" ]; then echo "Usage: ${FUNCNAME} \$K8S_USERNAME"; return 1; fi

  kubectl -n ${K8S_NS} describe secret $(kubectl -n ${K8S_NS} get secret | grep ${K8S_USERNAME} | awk '{print $1}')

}

function kubectl-get-all-namespaces-names() {

  kubectl get ns --output name | sed 's|^namespace/||g'

}


function kubectl-get-not-namespaced-resources() {

  kubectl api-resources --output=name --namespaced=false

}

function kubectl-get-namespaced-resources() {

  kubectl api-resources --output=name --namespaced=true

}

function kubectl-get-all-resources-summary() {

  ERRORS_REGEXP="No resources\|NotFound\|MethodNotAllowed"
  # no namespaced resources
  kubectl-get-not-namespaced-resources | while read resource
  do
    TMP_FILE="/tmp/k8sb.${resource}"
    kubectl get ${resource} -o wide &> ${TMP_FILE}
    grep -iq "$ERRORS_REGEXP" ${TMP_FILE} || \
      ( echo "[+] '${resource}' list:" && \
      cat ${TMP_FILE} )
  done

  # namespaced resources
  kubectl-get-namespaced-resources | grep -iv events | while read resource
  do
    TMP_FILE="/tmp/k8sb.${resource}"
    kubectl get ${resource} --all-namespaces -o wide &> ${TMP_FILE}
    grep -iq "$ERRORS_REGEXP" ${TMP_FILE} || \
      ( echo "[+] '${resource}' list:" && \
      cat ${TMP_FILE} )
  done

}

function kubectl-get-all-resources-summary-for-ns() {

  NS="$1"
  ERRORS_REGEXP="No resources\|NotFound\|MethodNotAllowed"
  kubectl-get-namespaced-resources | grep -iv events | while read resource
  do
    TMP_FILE="/tmp/k8sb.${NS}.${resource}"
    kubectl get ${resource} --namespace ${NS} -o wide &> ${TMP_FILE}
    grep -iq "$ERRORS_REGEXP" ${TMP_FILE} || \
      ( echo "[+] '${resource}' list:" &&
        cat ${TMP_FILE} )
  done


}

function kubectl-delete-all-resources-from-ns() {

  NS="$1"
  ERRORS_REGEXP="No resources\|NotFound\|MethodNotAllowed"
  kubectl-get-namespaced-resources | grep -iv events | while read resource
  do
    RESOURCE_TYPE=${resource}
    TMP_FILE="/tmp/k8sb.${NS}.${RESOURCE_TYPE}"
    kubectl get ${RESOURCE_TYPE} --namespace ${NS} -o wide &> ${TMP_FILE}
    grep -iq "$ERRORS_REGEXP" ${TMP_FILE} || \
      ( awk '{print $1}' ${TMP_FILE} | grep -v ^NAME | while read res; do kubectl delete -n ${NS} ${RESOURCE_TYPE} ${res}; done )
  done

}

function kubectl-get-all-pods-pending() {

  kubectl get pods -A --field-selector=status.phase=Pending

}

function kubectl-get-all-pods-running() {

  kubectl get pods -A --field-selector=status.phase=Running

}

function kubectl-get-all-pods-sorted-by-creation-timestamp() {

  kubectl get pods -A --sort-by=.metadata.creationTimestamp

}

function kubectl-get-all-pods-in-ns-wide() {

  NAMESPACE=$1
  HEADER=$(kubectl get pods -n ${NAMESPACE} -o wide | head -n1) # FIXEM: this shouldn't be expensive :(
  echo "$HEADER"
  kubectl get pods -n ${NAMESPACE} -o wide | grep -v ^NAME | while read line
  do
    NODE_NAME=$(echo $line | awk '{print $7}')
    NODE_ROLE=$(kubectl get nodes -l kubernetes.io/hostname=${NODE_NAME} | grep -v ^NAME | awk '{print $3}' | awk -F, '{print $1}')
    echo "$line" | sed "s|${NODE_NAME}|${NODE_NAME} (${NODE_ROLE})|"
  done

}

function kubectl-get-all-pods-wide() {

  HEADER=$(kubectl get pods -o wide | head -n1) # FIXEM: this shouldn't be expensive :(
  echo "$HEADER"
  kubectl get pods -A -o wide | grep -v ^NAME | while read line
  do
    NODE_NAME=$(echo $line | awk '{print $8}')
    NODE_ROLE=$(kubectl get nodes -l kubernetes.io/hostname=${NODE_NAME} | grep -v ^NAME | awk '{print $3}')
    echo "$line" | sed "s|${NODE_NAME}|${NODE_NAME} (${NODE_ROLE})|"
  done

}

function kubectl-get-all-services() {

  kubectl get services --all-namespaces

}

function kubectl-get-nodes-external-ips() {

  kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'

}

function kubectl-get-nodes-internal-ips() {

  kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}'

}

function kubectl-get-all() {

  # output for 'kubectl get'
  # * certificatesigningrequests (aka 'csr')
  # * clusterrolebindings
  # * clusterroles
  # * componentstatuses (aka 'cs')
  # * configmaps (aka 'cm')
  # * controllerrevisions
  # * cronjobs
  # * customresourcedefinition (aka 'crd')
  # * daemonsets (aka 'ds')
  # * deployments (aka 'deploy')
  # * endpoints (aka 'ep')
  # * events (aka 'ev')
  # * horizontalpodautoscalers (aka 'hpa')
  # * ingresses (aka 'ing')
  # * jobs
  # * limitranges (aka 'limits')
  # * namespaces (aka 'ns')
  # * networkpolicies (aka 'netpol')
  # * nodes (aka 'no')
  # * persistentvolumeclaims (aka 'pvc')
  # * persistentvolumes (aka 'pv')
  # * poddisruptionbudgets (aka 'pdb')
  # * podpreset
  # * pods (aka 'po')
  # * podsecuritypolicies (aka 'psp')
  # * podtemplates
  # * replicasets (aka 'rs')
  # * replicationcontrollers (aka 'rc')
  # * resourcequotas (aka 'quota')
  # * rolebindings
  # * roles
  # * secrets
  # * serviceaccounts (aka 'sa')
  # * services (aka 'svc')
  # * statefulsets (aka 'sts')
  # * storageclasses (aka 'sc')

  #kubectl get pv,pvc,pod,rs,rc,sts,svc,deploy,cm --all-namespaces
  kubectl get pv,pvc,pod,rs,rc,sts,svc,deploy,cm

}

function kubectl-delete-related-resource-on-namespace() {

  ARGS="$@"
  if [ -z "$ARGS" ]; then echo "Usage: $FUNCNAME \$NAMESPACE \$REGEXP"; return 1; fi

  NAMESPACE="$1"
  REGEXP=$(echo $ARGS | sed "s|$NAMESPACE ||g")

  kubectl-get-all $NAMESPACE | grep $REGEXP | awk '{print $1}'| while read res;
  do
    RES_TYPE=$(echo $res | awk -F/ '{print $1}')
    RES=$(echo $res| awk -F/ '{print $2}')
    kubectl delete $RES_TYPE $RES
  done

}

function kubectl-get-nodes-status {

  HEADER=$(kubectl get nodes -o wide | head -n1) # FIXEM: this shouldn't be expensive :(
  echo $HEADER | tr ' ' \\t
  kubectl get nodes -o wide | grep -v ^NAME | while read line
  do
    NODE_NAME=$(echo $line | awk '{print $1}')
    echo $line | tr ' ' \\t
    kubectl get nodes -l kubernetes.io/hostname=${NODE_NAME} -o jsonpath='{range .items[*]}{range @.status.conditions[*]}{@.type}={@.status}{"\n"}{end}{end}'
  done

}

function kubectl-get-nodes-taints() {

  kubectl get nodes -o json | jq ".items[]|{name:.metadata.name, taints:.spec.taints}"

}

function kubectl-get-events-sorted-by-timestamp() {

  kubectl get events --sort-by='.lastTimestamp' $@

}

# TODO: knowhow vario
# helm del --purge

#RELEASE_NAME=dev-mongod
#
#REPLICAS=5
#
#helm upgrade ${RELEASE_NAME} --set replicas=$REPLICAS stable/mongodb-replicaset
#
#for ((i = 0; i < $REPLICAS; ++i)); do kubectl -n default expose pod ${RELEASE_NAME}-mongodb-replicaset-$i --type=NodePort; done

#echo -n “Waiting for mongodb-replicaset to start…”
#
#while [[ $(helm status $RELEASE_NAME | grep 'v1/Pod' -A$(expr $REPLICAS + 1)|grep Running |wc -l) != $REPLICAS ]]; do echo -n .; sleep 1; done

#helm install --name ${RELEASE_NAME} --set replicas=$REPLICAS --set persistentVolume.size=$REPLICA_SIZE  stable/mongodb-replicaset

# kubectl expose deployment trudesk --type=NodePort --name=trudesk && kubectl get service trudesk

